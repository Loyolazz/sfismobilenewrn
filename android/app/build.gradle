apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"

def projectRoot = rootDir.getAbsoluteFile().getParentFile().getAbsolutePath()

react {
  // Usa o Expo CLI para bundle (compatível com Expo/SDK 53)
  entryFile = file(["node", "-e", "require('expo/scripts/resolveAppEntry')", projectRoot, "android", "absolute"].execute(null, rootDir).text.trim())
  reactNativeDir = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()
  hermesCommand = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsolutePath() + "/sdks/hermesc/%OS-BIN%/hermesc"
  codegenDir = new File(["node", "--print", "require.resolve('@react-native/codegen/package.json', { paths: [require.resolve('react-native/package.json')] })"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()

  enableBundleCompression = (findProperty('android.enableBundleCompression') ?: false).toBoolean()
  cliFile = new File(["node", "--print", "require.resolve('@expo/cli', { paths: [require.resolve('expo/package.json')] })"].execute(null, rootDir).text.trim())
  bundleCommand = "export:embed"

  autolinkLibrariesWithApp()
}

def enableProguardInReleaseBuilds = (findProperty('android.enableProguardInReleaseBuilds') ?: false).toBoolean()
def jscFlavor = 'io.github.react-native-community:jsc-android:2026004.+'

android {
  ndkVersion rootProject.ext.ndkVersion

  // Em AGP 8+, não é obrigatório setar buildToolsVersion; mantido se existir no ext
  if (rootProject.ext.has('buildToolsVersion')) {
    buildToolsVersion rootProject.ext.buildToolsVersion
  }
  compileSdk rootProject.ext.compileSdkVersion

  namespace 'com.antaq.sfismobile2'

  defaultConfig {
    applicationId 'com.antaq.sfismobile2'
    minSdkVersion rootProject.ext.minSdkVersion      // 24 (definido no build.gradle raiz)
    targetSdkVersion rootProject.ext.targetSdkVersion // 34 (definido no build.gradle raiz)
    versionCode 12
    versionName "1.2.11"
  }

  signingConfigs {
    debug {
      storeFile file('debug.keystore')
      storePassword 'android'
      keyAlias 'androiddebugkey'
      keyPassword 'android'
    }
    // Não defina release aqui: o EAS injeta a assinatura de release automaticamente no CI
  }

  buildTypes {
    debug {
      signingConfig signingConfigs.debug
    }
    release {
      // ⚠️ Não usar a debug key em release. Deixe o EAS assinar automaticamente.
      shrinkResources (findProperty('android.enableShrinkResourcesInReleaseBuilds')?.toBoolean() ?: false)
      minifyEnabled enableProguardInReleaseBuilds
      proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
      crunchPngs (findProperty('android.enablePngCrunchInReleaseBuilds')?.toBoolean() ?: true)
    }
  }

  packagingOptions {
    jniLibs {
      useLegacyPackaging (findProperty('expo.useLegacyPackaging')?.toBoolean() ?: false)
    }
  }
  androidResources {
    ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:!CVS:!thumbs.db:!picasa.ini:!*~'
  }
}

// Propaga listas do gradle.properties (pickFirsts/excludes/merges/doNotStrip)
["pickFirsts", "excludes", "merges", "doNotStrip"].each { prop ->
  def options = (findProperty("android.packagingOptions.$prop") ?: "").split(",")
  for (i in 0..<options.size()) options[i] = options[i].trim()
  options -= ""
  if (options.length > 0) {
    println "android.packagingOptions.$prop += $options ($options.length)"
    options.each { android.packagingOptions[prop] += it }
  }
}

dependencies {
  // Versão de RN definida pelo plugin
  implementation("com.facebook.react:react-android")

  def isGifEnabled = (findProperty('expo.gif.enabled') ?: "") == "true";
  def isWebpEnabled = (findProperty('expo.webp.enabled') ?: "") == "true";
  def isWebpAnimatedEnabled = (findProperty('expo.webp.animated') ?: "") == "true";

  if (isGifEnabled) {
    implementation("com.facebook.fresco:animated-gif:${expoLibs.versions.fresco.get()}")
  }
  if (isWebpEnabled) {
    implementation("com.facebook.fresco:webpsupport:${expoLibs.versions.fresco.get()}")
    if (isWebpAnimatedEnabled) {
      implementation("com.facebook.fresco:animated-webp:${expoLibs.versions.fresco.get()}")
    }
  }

  if (hermesEnabled.toBoolean()) {
    implementation("com.facebook.react:hermes-android")
  } else {
    implementation jscFlavor
  }
}
